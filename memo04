자바의 장점 -> 쓰레드를 작성하기 매우 유용함.

프로젝션 -> 클래스에서 메서드를 가져오기 위한 방법 ex) Integer"."parseInt
사람 = (이름, 나이, 성별)
사람.이름 ->

move(circle, point(x, y)) -> 기존 언어

circle.move(point(x, y)) -> 메세지 패싱 패러다임

객체 지향이란, Object를 중심으로 Object의 행동을 설계하는 것.

Ojbect.achieve(field) 의 구조
Object = 데이터 타입
achieve = 연산
field = 필요한 재료

type checking -> 연산의 집합을 확인함.

Wrapper class
List<String> list = new List<>();
-> 선언부에서 String 은 Reference Type이다.
<String> 대신 <int>는 사용이 불가능하다. int형의 경우, Primitive Type이기에,  Reference Type만 wrapper class로 선언이 가능하다.
<int>를 사용할 수 없기에 나온 int의 클래스 형인 <Integer>를 사용하면 된다.
그러면 왜 int 는 사용할 수 없는 것일까?
int의 경우는 main함수가 실행되는 시점에서 생성되는 Stack영역의 Type이기 때문이다.
Wrapper class의 경우 불러오는 것은 Heap영역에 저장된 주소로 불러들이기 때문에, primitive type이 아닌 Reference Type만 가능하다.
제너릭 사용.
기존 Object를 사용하였지만, Object를 사용하면 새로 들어오는 타입이 무슨 타입인지 모르고, Object로 판별하기에 제너릭이 생성됨
제너릭을 이용해서 위의 타입의 유동성을 안전하게 재 정의함.
그러면 제너릭을 이용해서 만들어진 변수는, 더 제약조건을 걸기 위해 이런식으로 선언 가능
public Stack<T extends Numbers>{}

제너릭은 Static 영역에서 지정이 안되기에, 불러 올 수도 없음 -> why? T라는 것은 stack에서 T의 형 Type를 지정해주는데, Type이 초기화가 안된상태에서 저장하는건 상식적으로도 이상함

main 내부에 <T>등을 정의하는게 불가능함.

String s = new String("");
Object o = s
s == o   ----> false;

만약에
String s2 = (String) o;로 Object객체의 타입이 정해져있다면
s == o -------> true;



int x = 4; --> 스택 영역에 있음   ---> 스택 영역의 변수의 이름을 지정하는 것
Integer y = new Integer(4); --> 힙 영역에 있음.  -> 값을 바꾸는걸로 인식하는게 아닌, 메모리 안에 값을 지정하는것.
자바에서 new는 포인터라고 생각하면 된다.
Boxing UnBoxing 알아보기.